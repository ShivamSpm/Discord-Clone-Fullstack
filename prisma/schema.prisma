generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

// This is different from members as a Profile can have multiple members.
// This object is created on server create to know who created the server
// Also when the user signs up a profile is created for that user
model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers   Server[]
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String   @db.Text
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text
  fileUrl        String?      @db.Text
  memberId       String
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}